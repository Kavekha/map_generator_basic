v0.0.5
    Passe Black & Pylint, pour la forme.
    Retrait des directions "diagonales", sous config.
    Retrait corridor, sous config.
    Changement des MAX_ITERATION.

v0.0.4
    On reconstruit la room desormais systematiquement, on essait pas a tout pris de placer celle existante.
    Les salles ont des min/ max plus grands pour les width que pour les height.
    Constat: Autant de rooms generées, mais toujours de grands gaps. Peu de hors map. Pluss de collisions.
    On ajoute des Corridors devant la nouvelle room.
    Le corridor peut tout ecraser, rien à faire.
    Legeres modifs pour les directions, où les Rooms pouvaient être mal placées par defaut a cause des divisions.
     Constat: La map est plus sexy, et toutes les salles sont liées.
     Modifications des coordonnées selon la direction. TODO: Vraie algorithme-like.
     Constats : Formes plus sympas, mais très circulaires. Succès plus elevés, mais gros echecs encore possibles.

v0.0.3
    On construit la nouvelle salle à l'un des 8 points cardinaux autour de la salle de reference.
    Si ca ne marche pas, on essait sur les suivants.
    Point de depart de la première room : Forcement au milieu.
    Bug : Room hors de la map considéré comme dans la map.
    Bug : Room hors de contact des autres rooms (Direction fausse?)
    Bug : 4° room de reference utilisée etait la premiere. Melange dans les loops?
    Changement : 80 x 50 de taille de map.
    Best scores (Du à l'anomalie):
         >> END : Sucess : 31 - Collisions : 35 - Out of Map : 250 - Placement iteration : 285
    Cas classique:
        >> END : Sucess : 12 - Collisions : 52 - Out of Map : 492 - Placement iteration : 544

v0.0.2
    [/] Une nouvelle room doit être testée au contact de la précédente.
    Refacto.
    On genere une premiere room.
    Les rooms suivantes tentent de se placer autour de la première.
    Pour le moment, on prends des points au hasard autour de la première room.
    Pas d'intelligence, donc repetitions nombreuses et peu utiles.
    >> END : Sucess : 5 - Collisions : 25 - Out of Map : 1775 - Placement iteration : 1800

v0.0.1
    MapGen de base.
    Genere une Room, verifie qu'elle tient dans la map.
    Si elle tient dans la map, verifie qu'elle n'entre pas en collision avec une room existante.
    Si tout est OK, elle est posée sur la map. Une nouvelle generation se poursuit.
    (100 iterations, 20 success, 40 collisions, 40 out of map en moyenne).


# TODO:
    [ ] Reduire les gros ecarts de succès : de 7 à 35 rooms, c'est un trop grand ecart. Il faut en garantir au moins 30.
    [/] Intelligence ou meilleure methode pour trouver le placement d'une map par rapport à une autre.

    [ ] Les salles Corridors / Rooms doivent être pluss en contact, pour permettre l'existence de passage.
    [ ] Meilleur "algorithme" pour le placement selon la direction. Trop specifique pour le moment.

    [ ] Reduire les problèmes d'orientation. Refacto code.
    [/] Reduire les Out of Map.

    [ ] Une "porte" / chemin devra relier les deux rooms une fois la suivante posée.
    [ ] Un "corridor" peut les lier : rectangle à cheval sur les deux rooms.

    [ ] Bordure de 1 - 3 de taille, pour ne pas se marcher dessus.
    [ ] Sur chaque Rectangle, des emplacements "porte" / "passage". On essaie uniquement de raccrocher des passages à d'autres passages.

    [ ] Une room peut être deux rectangles fusionnés, pour des formes plus sympas.
    [ ] configurable, pour avoir differentes variantes selon Nature / Interieur

    [ ] Une fois toutes les iterations faites, on regarde si il y a des passages possibles entre deux rooms autres.

    [ ] Forme aleatoire des rooms, pour eviter sentiment artificiel.
            > Sur les bords, 55% 1, 45% 0. Si 010 = 000. Si 101 = 111.





